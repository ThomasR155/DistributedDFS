# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import dfs_pb2 as dfs__pb2


class GreeterStub(object):
    """The greeting service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SayHello = channel.unary_unary(
                '/DFS.Greeter/SayHello',
                request_serializer=dfs__pb2.HelloRequest.SerializeToString,
                response_deserializer=dfs__pb2.HelloReply.FromString,
                )
        self.CallNeighbors = channel.unary_unary(
                '/DFS.Greeter/CallNeighbors',
                request_serializer=dfs__pb2.CallRequest.SerializeToString,
                response_deserializer=dfs__pb2.CallReply.FromString,
                )


class GreeterServicer(object):
    """The greeting service definition.
    """

    def SayHello(self, request, context):
        """Sends a greeting
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CallNeighbors(self, request, context):
        """Sends greeting to neighbors
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GreeterServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SayHello': grpc.unary_unary_rpc_method_handler(
                    servicer.SayHello,
                    request_deserializer=dfs__pb2.HelloRequest.FromString,
                    response_serializer=dfs__pb2.HelloReply.SerializeToString,
            ),
            'CallNeighbors': grpc.unary_unary_rpc_method_handler(
                    servicer.CallNeighbors,
                    request_deserializer=dfs__pb2.CallRequest.FromString,
                    response_serializer=dfs__pb2.CallReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'DFS.Greeter', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Greeter(object):
    """The greeting service definition.
    """

    @staticmethod
    def SayHello(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DFS.Greeter/SayHello',
            dfs__pb2.HelloRequest.SerializeToString,
            dfs__pb2.HelloReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CallNeighbors(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DFS.Greeter/CallNeighbors',
            dfs__pb2.CallRequest.SerializeToString,
            dfs__pb2.CallReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class DFSStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.MakeRoot = channel.unary_unary(
                '/DFS.DFS/MakeRoot',
                request_serializer=dfs__pb2.RootRequest.SerializeToString,
                response_deserializer=dfs__pb2.TreeMessage.FromString,
                )
        self.SendForward = channel.unary_unary(
                '/DFS.DFS/SendForward',
                request_serializer=dfs__pb2.ForwardMessage.SerializeToString,
                response_deserializer=dfs__pb2.ForwardReply.FromString,
                )
        self.SendBackward = channel.unary_unary(
                '/DFS.DFS/SendBackward',
                request_serializer=dfs__pb2.BackwardMessage.SerializeToString,
                response_deserializer=dfs__pb2.BackwardReply.FromString,
                )


class DFSServicer(object):
    """Missing associated documentation comment in .proto file."""

    def MakeRoot(self, request, context):
        """Starts DFS in a certain node
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendForward(self, request, context):
        """Sends message to another node
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendBackward(self, request, context):
        """Sends message upwards / backwards in the tree towards the root
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DFSServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'MakeRoot': grpc.unary_unary_rpc_method_handler(
                    servicer.MakeRoot,
                    request_deserializer=dfs__pb2.RootRequest.FromString,
                    response_serializer=dfs__pb2.TreeMessage.SerializeToString,
            ),
            'SendForward': grpc.unary_unary_rpc_method_handler(
                    servicer.SendForward,
                    request_deserializer=dfs__pb2.ForwardMessage.FromString,
                    response_serializer=dfs__pb2.ForwardReply.SerializeToString,
            ),
            'SendBackward': grpc.unary_unary_rpc_method_handler(
                    servicer.SendBackward,
                    request_deserializer=dfs__pb2.BackwardMessage.FromString,
                    response_serializer=dfs__pb2.BackwardReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'DFS.DFS', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DFS(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def MakeRoot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DFS.DFS/MakeRoot',
            dfs__pb2.RootRequest.SerializeToString,
            dfs__pb2.TreeMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendForward(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DFS.DFS/SendForward',
            dfs__pb2.ForwardMessage.SerializeToString,
            dfs__pb2.ForwardReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendBackward(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DFS.DFS/SendBackward',
            dfs__pb2.BackwardMessage.SerializeToString,
            dfs__pb2.BackwardReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
